그래들은 우선 settings.gradle 파일을 참고해 프로젝트의 구조를 파악합니다. 그런 다음 개별 프로젝트를 build.gradle을 통해 빌드하는 방식으로 동작합니다.

settings.gradle
settings에서는 전체 프로젝트의 구조를 빌드한다. 일반적으로는
rootProject.name="project-name"
include "project-name"
으로 한개의 프로젝트를 구성하지만, 여러 모듈 프로젝트들을 포함하는 경우
rootProject.name="project-name"
include ":sub-project1"
include ":sub-project2"

와 같이 하위 프로젝트들을 포함시켜 준다.
하지만 모듈 프로젝트들이 많아서 이들을 group으로 관리하고 싶다면 다음과 같이 자동 빌드하는 스크립트를 쓰면 편리하다.

rootProject.name = 'sp-fastcampus-spring-sec'
["comp", "web", "server"].each {

    def compDir = new File(rootDir, it)
    if(!compDir.exists()){
        compDir.mkdirs()
    }

    compDir.eachDir {subDir ->

        def gradleFile = new File(subDir.absolutePath, "build.gradle")
        if(!gradleFile.exists()){
            gradleFile.text =
                    """

                    dependencies {

                    }

                    """.stripIndent(20)
        }

        [
                "src/main/java/com/sp/fc",
                "src/main/resources",
                "src/test/java/com/sp/fc",
                "src/test/resources"
        ].each {srcDir->
            def srcFolder = new File(subDir.absolutePath, srcDir)
            if(!srcFolder.exists()){
                srcFolder.mkdirs()
            }
        }

        def projectName = ":${it}-${subDir.name}";
        include projectName
        project(projectName).projectDir = subDir
    }
}
이렇게 한 후 그래들을 새로고침하면 폴더가 만들어진 것을 확인할 수 있다.

그러고 server 디렉터리에 basic-test라는 디렉터리를 만들고 다시 그래들을 새로고침하면 폴더가 자동으로 생기는 것을 확인한다.
///////////////////////////////////////////////////////////////////////////////////////////////////////////
그리고 최상위 build.gradle에서
buildscript{}
allprojects{}//공통
subprojects{}//각각 하위
buildscript{
    ext {
        spring = "2.4.1"
        boot = "org.springframework.boot"
        lombok = "org.projectlombok:lombok"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("$boot:spring-boot-gradle-plugin:$spring")
    }
}

allprojects {
    group = "com.sp.fc"
    version = "1.0.0"
}

subprojects{
    apply plugin: "java"//이걸 추가하고 그래들 새로고침 시 리소스 경로가 잡힌다.
    apply plugin: boot
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    repositories {
        mavenCentral()
    }
    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }
    dependencies {
        developmentOnly("$boot:spring-boot-devtools")
        implementation "$boot:spring-boot-starter-security"
        implementation 'com.fasterxml.jackson.core:jackson-annotations'

        compileOnly lombok
        testCompileOnly lombok
        annotationProcessor lombok
        testAnnotationProcessor lombok

        testImplementation "$boot:spring-boot-starter-test"
    }
    test {
        useJUnitPlatform()
    }
}

["comp", "web"].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir {dir->
        def projectName = ":${it}-${dir.name}"
        project(projectName){
            bootJar.enabled(false)//comp디렉터리에 common-utils라는 경로만 만들어도 부트 프로젝트가 되는 것을 방지
            jar.enabled(true)
        }
    }
}
["server"].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir {dir->
        def projectName = ":${it}-${dir.name}"
        project(projectName){

        }
    }
}

help.enabled(false)

server 하위 build.gradle
dependencies {
    implementation("$boot:spring-boot-starter-web")
}
그러고 com.sp.fc 하위에 BasicTestApplication만들고
Test1작성

이후 comp에 Person작성하고 Server에서 부르고

